{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Copyright © github.qingyejiazhu.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-15 11:50:56 "},"part1/writing.html":{"url":"part1/writing.html","title":"GitBook 从懵逼到入门","keywords":"","body":"GitBook 从懵逼到入门 2019年06月15日 16:36:57 本文从 “是什么”、“为什么”、“怎么办”、“好不好” 四个维度来介绍 GitBook，带你从黑暗之中走出来，get 这种美妙的写作方式。 是什么？ 在我认识 GitBook 之前，我已经在使用 Git 了，毋容置疑，Git 是目前世界上最先进的分布式版本控制系统。 我认为 Git 不仅是程序员管理代码的工具，它的分布式协作方式同样适用于很多场合，其中一个就是写作（这会是一个引起社会变革的伟大的工具！）。所以在我发现 GitBook 之前，实际上我已经无数次想象过它的使用场景了。 咋一看 GitBook 的名字，你可能会认为它是关于 Git 的一本书。而当你有所了解之后，你也许会认为它是一个使用 Git 构建电子书的工具。其实不然，GitBook 与 Git 的关系，就像雷锋塔和雷锋那样，没有一点关系！ 实际上，GitBook 是一个基于 Node.js 的命令行工具，支持 Markdown 和 AsciiDoc 两种语法格式，可以输出 HTML、PDF、eBook 等格式的电子书。所以我更喜欢把 GitBook 定义为文档格式转换工具。 　　 所以，GitBook 不是 Markdown 编辑工具，也不是 Git 版本管理工具。市面上我们可以找到很多 Markdown 编辑器，比如 Typora、MacDown、Bear、MarkdownPad、MarkdownX、JetBrains’s IDE（需要安装插件）、Atom、简书、CSDN 以及 GitBook 自家的 GitBook Editor 等等。 但 GitBook 又与 Markdown 和 Git 息息相关，因为只有将它们结合起来使用，才能将它们的威力发挥到极致！因此，通常我们会选择合适的 Markdown 编辑工具以获得飞一般的写作体验；使用 GitBook 管理文档，预览、制作电子书；同时通过 Git 管理书籍内容的变更，并将其托管到云端（比如 GitHub、GitLab、码云，或者是自己搭建的 Git 服务器），实现多人协作。 实际上，GitBook Editor 对于新手来说是个不错的选择，它集成了 GitBook、Git、Markdown 等功能，还支持将书籍同步到 gitbook.com 网站，使我们可以很方便地编辑和管理书籍。但是不幸的是，GitBook Editor 的注册和登录需要翻墙，即便注册成功了也可能登录不上，似乎是因为网站最近在升级。 因此，我推荐，也是我目前使用的搭配是 GitBook + Typora + Git。 为什么？ 通常，我们最开始学习和使用的办公软件就是 Word、Excel 和 PowerPoint。这里不是说它们已经过时了，不是说 GitBook 能够替代它们。 相反，Microsoft 的办公软件很优秀并且经受了时间的考验，但是正因为它功能丰富，导致稍显臃肿（二八定律：80%的时间里我们只会只用20%的功能），同时因为它存在以二进制格式保存、软件不兼容、格式不兼容、难以进行版本控制、难以实时分享预览、难以多人协作等短板。而这恰恰是 GitBook + Markdown + Git 的长处。 简单来说，GitBook + Markdown + Git 带来的好处有： 语法简单 兼容性强 导出方便 专注内容 团队协作 所以，如果你和我一样，不满足于传统的写作方式，正在寻找一种令人愉悦的写作方式，那么该尝试使用 GitBook 啦！ 当然，GitBook 不是万能的，当我们需要复杂排版时，依然需要依托于 Word 等工具。但不用担心，因为我们可以把 Markdown 格式的文档导出为 Word 格式，再进一步加工。 怎么办？ 怎么安装 当你听了我的怂恿，并决定尝试使用 GitBook 的时候，首先面临的问题是 —— 如何搭建 GitBook 环境？ 因为 GitBook 是基于 Node.js，所以我们首先需要安装 Node.js（下载地址：https://nodejs.org/en/download/），找到对应平台的版本安装即可。 现在安装 Node.js 都会默认安装 npm（node 包管理工具），所以我们不用单独安装 npm，打开命令行，执行以下命令安装 GitBook： npm install -g gitbook-cli 1 安装完之后，就会多了一个 gitbook 命令（如果没有，请确认上面的命令是否加了 -g）。 上面我推荐的是 GitBook + Typora + Git，所以你还需要安装 Typora（一个很棒的支持 macOS、Windows、Linux 的 Markdown 编辑工具）和 Git 版本管理工具。戳下面： Typora 下载地址：https://typora.io/ Git 下载地址：https://git-scm.com/downloads Typora 的安装很简单，难点在于需要翻墙才能下载（当然你也可以找我要）。Git 的安装也很简单，但要用好它需要不少时间，这里就不展开了（再讲下去怕你要跑啦~）。 怎么使用 想象一下，现在你准备构建一本书籍，你在硬盘上新建了一个叫 mybook 的文件夹，按照以前的做法，你会新建一个 Word 文档，写上标题，然后开始巴滋巴滋地笔耕。但是现在有了 GitBook，你首先要做的是在 mybook 文件夹下执行以下命令： gitbook init 执行完后，你会看到多了两个文件 —— README.md 和 SUMMARY.md，它们的作用如下： README.md —— 书籍的介绍写在这个文件里 SUMMARY.md —— 书籍的目录结构在这里配置 这时候，我们启动恭候多时的 Typora 来编辑这两个文件了： 编辑 SUMMARY.md 文件，内容修改为： # 目录 * [前言](README.md) * [第一章](Chapter1/README.md) * [第1节：衣](Chapter1/衣.md) * [第2节：食](Chapter1/食.md) * [第3节：住](Chapter1/住.md) * [第4节：行](Chapter1/行.md) * [第二章](Chapter2/README.md) * [第三章](Chapter3/README.md) * [第四章](Chapter4/README.md) 然后我们回到命令行，在 mybook 文件夹中再次执行 gitbook init 命令。GitBook 会查找 SUMMARY.md 文件中描述的目录和文件，如果没有则会将其创建。 Typora 是所见即所得（实时渲染）的 Markdown 编辑器，这时候它是这样的： 接着我们执行 gitbook serve 来预览这本书籍，执行命令后会对 Markdown 格式的文档进行转换，默认转换为 html 格式，最后提示 “Serving book on http://localhost:4000”。嗯，打开浏览器看一下吧： 当你写得差不多，你可以执行 gitbook build 命令构建书籍，默认将生成的静态网站输出到 _book 目录。实际上，这一步也包含在 gitbook serve 里面，因为它们是 HTML，所以 GitBook 通过 Node.js 给你提供服务了。 当然，build 命令可以指定路径： gitbook build [书籍路径] [输出路径] serve 命令也可以指定端口： gitbook serve --port 2333 你还可以生成 PDF 格式的电子书： gitbook pdf ./ ./mybook.pdf 生成 epub 格式的电子书： gitbook epub ./ ./mybook.epub 生成 mobi 格式的电子书： gitbook mobi ./ ./mybook.mobi 如果生成不了，你可能还需要安装一些工具，比如 ebook-convert。或者在 Typora 中安装 Pandoc 进行导出。 除此之外，别忘了还可以用 Git 做版本管理呀！在 mybook 目录下执行 git init 初始化仓库，执行 git remote add 添加远程仓库（你得先在远端建好）。接着就可以愉快地 commit，push，pull … 啦！ 不是程序员的小伙伴可能不太喜欢用命令行，那其实版本管理这部分可以下载安装 Git 或 GitHub 这些客户端程序，在图形界面上操作也是可以完成工作的。 book.json 该文件主要用来存放配置信息，我先放出我的配置文件。 { \"title\": \"Blankj's Glory\", \"author\": \"Blankj\", \"description\": \"select * from learn\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"styles\": { \"website\": \"./styles/website.css\" }, \"structure\": { \"readme\": \"README.md\" }, \"links\": { \"sidebar\": { \"我的狗窝\": \"https://blankj.com\" } }, \"plugins\": [ \"-sharing\", \"splitter\", \"expandable-chapters-small\", \"anchors\", \"github\", \"github-buttons\", \"donate\", \"sharing-plus\", \"anchor-navigation-ex\", \"favicon\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/Blankj\" }, \"github-buttons\": { \"buttons\": [{ \"user\": \"Blankj\", \"repo\": \"glory\", \"type\": \"star\", \"size\": \"small\", \"count\": true } ] }, \"donate\": { \"alipay\": \"./source/images/donate.png\", \"title\": \"\", \"button\": \"赞赏\", \"alipayText\": \" \" }, \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": false, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": false, \"linkedin\": false, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": false, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": false, \"whatsapp\": false, \"all\": [ \"google\", \"facebook\", \"weibo\", \"twitter\", \"qq\", \"qzone\", \"linkedin\", \"pocket\" ] }, \"anchor-navigation-ex\": { \"showLevel\": false }, \"favicon\":{ \"shortcut\": \"./source/images/favicon.jpg\", \"bookmark\": \"./source/images/favicon.jpg\", \"appleTouch\": \"./source/images/apple-touch-icon.jpg\", \"appleTouchMore\": { \"120x120\": \"./source/images/apple-touch-icon.jpg\", \"180x180\": \"./source/images/apple-touch-icon.jpg\" } } } } 相信很多节点自己也能猜到是什么意思，我还是简单介绍下吧。 title本书标题 author作者 description本书描述 language本书语言，中文设置 \"zh-hans\" 即可 gitbook指定使用的 GitBook 版本 styles自定义页面样式 structure指定 Readme、Summary、Glossary 和 Languages 对应的文件名 links在左侧导航栏添加链接信息 plugins配置使用的插件 pluginsConfig配置插件的属性 插件 GitBook 有 插件官网，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 -，比如： \"plugins\": [ \"-search\" ] 如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 plugin-github，我们在 book.json 中加入配置如下即可： { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/your/repo\" } } } 然后在终端输入 gitbook install ./ 即可。 如果要指定插件的版本可以使用 plugin@0.3.1，因为一些插件可能不会随着 GitBook 版本的升级而升级。 好不好？ 额… 你觉得好不好嘛？ 反正我觉得挺好的，特别是对我这种懒得排版，又想随时随地写作的宝宝来说。而且能够查看每个版本内容变更的情况，同时又避免了硬盘单一故障带来的风险。 GitBook运行报错 - no such file or directory 换一台电脑打开GitBook项目居然运行不了，gitbook serve和gitbook build都报错。 Error: ENOENT: no such file or directory, stat ‘C:*demo_book_book\\gitbook\\gitbook-plugin-fontsettings\\fontsettings.js’ 原来是一个Bug（Vesion：3.2.3）。 https://github.com/GitbookIO/gitbook/issues/1309 解决办法如下。 用户目录下找到以下文件。 .gitbook\\versions\\3.2.3\\lib\\output\\website\\copyPluginAssets.js Replace all confirm: true with confirm: false Copyright © github.qingyejiazhu.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-15 14:52:43 "},"part1/gitbook.html":{"url":"part1/gitbook.html","title":"GitBook插件整理","keywords":"","body":"GitBook插件整理 介绍一下gitbook中book.json的一些实用配置和插件 1. 配置概况 1.1. 全局配置 title 设置书本的标题 \"title\" : \"Gitbook Use\" author 作者的相关信息 \"author\" : \"mingyue\" description 本书的简单描述 \"description\" : \"记录Gitbook的配置和一些插件的使用\" language Gitbook使用的语言, 版本2.6.4中可选的语言如下： en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 例如，配置使用简体中文 \"language\" : \"zh-hans\" links 在左侧导航栏添加链接信息 \"links\" : { \"sidebar\" : { \"Home\" : \"https://www.baidu.com\" } } styles 自定义页面样式， 默认情况下各generator对应的css文件 \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } 例如使 标签有下边框， 可以在website.css中设置 h1 , h2{ border-bottom: 1px solid #EFEAEA; } 1.2. 插件列表 plugins 配置使用的插件 \"plugins\": [ \"-search\", \"back-to-top-button\", \"expandable-chapters-small\", \"insert-logo\" ] 其中\"-search\"中的 - 符号代表去除默认自带的插件 Gitbook默认自带有5个插件： highlight： 代码高亮 search： 导航栏查询功能（不支持中文） sharing：右上角分享功能 font-settings：字体设置（最上方的\"A\"符号） livereload：为GitBook实时重新加载 1.3. 插件属性配置pluginsConfig 配置插件的属性 例如配置insert-logo的属性： \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" } } 2. 一些实用插件 记录一些实用的插件 用法：在book.json中添加\"plugins\"和\"pluginConfig\"字段。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-插件名，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） 2.1. back-to-top-button 回到顶部 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-back-to-top-button，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"back-to-top-button\" ] } 2.2. 导航目录扩展 2.2.1. chapter-fold 导航目录折叠 支持多层目录，点击导航栏的标题名就可以实现折叠扩展。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-chapter-fold，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"chapter-fold\"] } 2.2.2. expandable-chapters-small 可扩展导航章节 支持多层目录，比Toggle Chapters好用 点击箭头才能实现收放目录。不如【2.2.1. chapter-fold 左侧目录折叠】好用 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-expandable-chapters-small，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"expandable-chapters-small\" ] } 2.2.3. expandable-chapters 可扩展导航章节 和expandable-chapters-small效果相同，唯一不同的是这个插件的箭头粗 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-expandable-chapters，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"expandable-chapters\" ] } 2.3. 代码复制，行号 2.3.1. code 代码添加行号&复制按钮（可选） 为代码块添加行号和复制按钮，复制按钮可关闭 单行代码无行号。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-code，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\" : [ \"code\" ] } 如果想去掉复制按钮，在book.json的插件配置块更新： { \"plugins\" : [ \"code\" ], \"pluginsConfig\": { \"code\": { \"copyButtons\": false } } } 2.3.2. copy-code-button 代码复制按钮 为代码块添加复制的按钮。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-copy-code-button，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"copy-code-button\"] } 效果如下图所示： 2.4. todo 待做项☑ 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type=checkbox]{ margin-left: -2em; } 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-todo，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"todo\"] } 使用示例： * [ ] write some articles * [x] drink a cup of tea 2.5. insert-logo 插入logo 将logo插入到导航栏上方中 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-insert-logo，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"insert-logo\" ] \"pluginsConfig\": { \"insert-logo\": { \"url\": \"images/logo.png\", \"style\": \"background: none; max-height: 30px; min-height: 30px\" } } } 2.6. search-pro 高级搜索（支持中文） 支持中文搜索, 在使用此插件之前，需要将默认的search和lunr 插件去掉。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-search-pro { \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\" ] } 2.7. advanced-emoji - 支持emoji表情 emoij表情列表 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-advanced-emoji，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"advanced-emoji\" ] } 2.8. github 在右上角添加github图标 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-github，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } } 效果图： 2.9. emphasize 为文字加上底色 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-emphasize，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"emphasize\" ] } 然后在markdown / asciidoc内容中，使用以下内容突出显示一些文本： This text is {% em %}highlighted !{% endem %} This text is {% em %}highlighted with **markdown**!{% endem %} This text is {% em type=\"green\" %}highlighted in green!{% endem %} This text is {% em type=\"red\" %}highlighted in red!{% endem %} This text is {% em color=\"#ff0000\" %}highlighted with a custom color!{% endem %} 效果图： 2.10. splitter 侧边栏宽度可调节 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-splitter，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"splitter\" ] } 效果图： 2.11. sharing-plus 分享当前页面，比默认的 sharing 插件多了一些分享方式。 插件地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-sharing-plus { \"plugins\": [\"-sharing\", \"sharing-plus\"], \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"pocket\": false, \"qq\": false, \"qzone\": true, \"twitter\": false, \"weibo\": true, \"all\": [ \"douban\", \"facebook\", \"google\", \"instapaper\", \"linkedin\",\"twitter\", \"weibo\", \"messenger\",\"qq\", \"qzone\",\"viber\",\"whatsapp\" ] } } } 其中： 为true的代表直接显示在页面顶端，为false的不显示，不写默认为false \"all\"中代表点击分享符号显示出来的 支持网站： \"douban\", \"facebook\", \"google\", \"hatenaBookmark\", \"instapaper\", \"linkedin\",\"twitter\", \"weibo\", \"messenger\",\"qq\", \"qzone\",\"viber\",\"vk\",\"weibo\", \"pocket\", \"stumbleupon\",\"whatsapp\" 效果图： 如果想增加其他分享网站，可以自己修改插件文件 button.js 和 package.json 。 首先你要知道那个网站的分享链接的结构（可以随便找其他的网站点击分享看看URL），比如我增加分享到人人网,链接是这样的结构（红框里的是通用结构，后面内容是不同的。第一部分表示被分享的URL，第二部分是标题title）： 然后在button.js中的var SITES = {····}中添加一条信息，和上面其他分享的信息类似。比如我增加的人人网是这样的 在package.json中仿照前面内容添加新网站的信息。比如我添加的人人网： \"renren\": { \"default\": false, \"description\": \"人人网\", \"type\": \"boolean\" } 2.12. 页面添加页脚、版权信息 2.12.1. tbfed-pagefooter 页面添加页脚（简单的） 添加页脚，版权信息 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-tbfed-pagefooter，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy xxxx.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } } 如果想加入一个URL，自己可以去index.js里，把powered by gitbook，改成 powered by 你的名字 2.12.2. page-copyright 页面页脚版权（内容多） 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-page-copyright，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\" : [\"page-copyright\"], \"pluginsConfig\" : { \"page-copyright\": { \"description\": \"modified at\", \"signature\": \"你的签名\", \"wisdom\": \"Designer, Frontend Developer & overall web enthusiast\", \"format\": \"YYYY-MM-dd hh:mm:ss\", \"copyright\": \"Copyright &#169; 你的名字\", \"timeColor\": \"#666\", \"copyrightColor\": \"#666\", \"utcOffset\": \"8\", \"style\": \"normal\", \"noPowered\": false, } } } 运行以后有很多信息是原创作者的，这些配置都在你的插件安装目录**\\node_modules\\gitbook-plugin-page-copyright下的index.js中，自己可以修改。大部分信息都在defaultOption中。 那个二维码可以在文件中找到QRcode改成自己的，或者直接把所有的efaultOption.isShowQRCode改成false 2.13. sectionx 将页面分块显示 用于将页面分成多个部分，并添加按钮以允许读者控制每个部分的可见性。 下面有个更好的折叠模块功能accordion 插件地址 GitHub地址 示例地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-sectionx，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub目链接） { \"plugins\": [ \"sectionx\" ] } 使用方法 内容分块： 在.md文件中定义一个部分（就是插入下面的字段）。 markdown中示例代码： 内容部分2； 效果图1： 这里只采用三个参数，其他参数如下所示： 参数 说明 data-title 该部分的标题，它将显示为bootstrap面板的标题（大小为h2）。 请注意，您不能使用\"标题中的字符，请&quot;改用。 data-id 章节的id，对按钮控制很有用（在下一节中讨论）。 data-show 默认表示面板内容是否可见的布尔值。 true：默认情况下，面板内容对用户可见，面板标题可以单击。 false：默认情况下，面板内容对用户隐藏，面板标题不可点击，只能通过添加自定义按钮查看（在下一节中讨论）。 data-nopdf 一个布尔值，表示该部分是否将隐藏在pdf导出中。 true：面板不会显示在.pdf或.epub中。 data-collapse 一个布尔值，表示默认情况下是否打开（但仍然可见）该部分。 true：默认情况下，面板内容对用户可见，但已关闭。 false：默认情况下，面板内容对用户可见，但已打开（默认设置）。 添加按钮，控制部分可见性 通过在GitBook中添加内联HTML，以下代码可以添加一个按钮，以允许您查看或隐藏其他部分。 简单来说，就是在【使用1】的内容部分添加一个按钮： 标签说明： 标签 说明 class 该按钮必须属于类“section”。//这里就是用到 1部分的section target 当按下时，将切换id为target的部分。 show 隐藏目标部分时按钮上的文本。 hide 目标部分可见时按钮上的文本。 markdown中示例代码： 内容部分2 效果图2： 混合使用 将第2节的button块添加到第1节的内容部分 markdown中示例代码： 内容部分1； 内容部分2 效果图3： 2.14. 生成页内目录 2.14.1. page-treeview 生成页内目录 不需要插入标签，能支持到6级目录，安装可用 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-page-treeview，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"page-treeview\"] } 非必要的配置项： { \"plugins\": [ \"page-treeview\" ], \"pluginsConfig\": { \"page-treeview\": { \"copyright\": \"Copyright &#169; aleen42\", \"minHeaderCount\": \"2\", \"minHeaderDeep\": \"2\" } } } 偷偷地告诉你，这个插件生成目录以后，下面有一行关于版权的文字。如果想去掉的话，找到插件目录下的index.js文件：***/node_modules/gitbook-plugin-page-treeview/lib/index.js 找到大约111行，删除这一行关于var copyRight的定义 下面113行的var insertTreeview中，删除+ copyRight，目前就不显示了 142行中的'copyright': 'Copyright &#169; aleen42',也可以删除 下面161行和163行和111行113行一样的，其实不删除也不显示了。 这个应该不算侵权吧。如果是的话，请联系我。。 2.14.2. simple-page-toc 生成本页目录 需要在文章中插入标签，支持1-3级目录 页面顶端生成。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-simple-page-toc，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接）（\"pluginsConfig\"不是必需的） { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 参数 说明 \"maxDepth\": 3 使用深度最多为maxdepth的标题。 \"skipFirstH1\": true 排除文件中的第一个h1级标题。 使用方法: 在需要生成目录的地方用下面的标签括起来，全文都生成的话就在首尾添加 内容部分 2.15. 悬浮目录 2.15.1. page-toc-button 悬浮目录 插件地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装（npm install gitbook-plugin-ancre-navigation，也可以从源码GitHub地址中下载，放到node_modules文件夹里 { \"plugins\" : [ \"page-toc-button\" ] } 可选配置： { \"plugins\" : [ \"page-toc-button\" ], \"pluginsConfig\": { \"page-toc-button\": { \"maxTocDepth\": 2, \"minTocSize\": 2 } } } 名称 默认 描述 maxTocDepth 2 标题的最大深度（2 = h1 + h2 + h3）。不支持值> 2。 minTocSize 2 显示toc按钮的最小toc条目数。 2.15.2. ancre-navigation 悬浮目录和回到顶部 添加Toc到侧边悬浮导航以及回到顶部按钮。 自动在标题前生成列表项：\"1. \" \"1.1. \" \"2. \" \"2.2. \" 需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取 # h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 插件地址 GitHub地址 类似插件 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-ancre-navigation，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"ancre-navigation\" ] } 2.16. klipse 嵌入类似IDE的功能 嵌入一块功能，可在代码段中实时交互，即（输入代码 > 执行结果 插件地址 GitHub地址 Klipse 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-klipse，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"klipse\"] } klipse 目前支持下面的语言： javascript: evaluation is done with the javascript function eval and pretty printing of the result is done with pretty-format clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter BrainFuck JSX EcmaScript2017 Google Charts: See Interactive Business Report with Google Charts. 下面是一个python的使用示例，其他语言类似，比如（eval-js）： ​```eval-python print [x + 1 for x in range(10)] ​ 效果如下所示： ![img](assets/14946112-b19f1f8990aa7d2a.png) ## 2.17. donate 打赏插件 文章最下面的按钮，点击可弹出图片 [插件地址](https://plugins.gitbook.com/plugin/donate) [GitHub地址](https://github.com/willin/gitbook-plugin-donate) 在book.json中添加以下内容。然后执行`gitbook install`，或者使用NPM安装`npm install gitbook-plugin-donate`，也可以从源码GitHub地址中下载，放到`node_modules`文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"微信收款的二维码URL\", \"alipay\": \"支付宝收款的二维码URL\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } } ## 2.18. change_girls 可自动切换的背景 添加背景图片，并且可以自动切换 [插件地址](https://github.com/zhenchao125/gitbook-plugin-change_girls) [GitHub地址](https://github.com/zhenchao125/gitbook-plugin-change_girls) 在book.json中添加以下内容。然后执行`gitbook install`，或者使用NPM安装`npm install gitbook-plugin-change_girls`，也可以从源码GitHub地址中下载，放到`node_modules`文件夹里（GitHub地址在进入插件地址右侧的GitHub链接是） { \"plugins\":[\"change_girls\"], \"pluginsConfig\": { \"change_girls\" : { \"time\" : 10, \"urls\" : [ \"girlUrl1\", \"girlUrl2\",...\"\" ] } } } 字段说明： - time：图片的切换时间，单位是秒 - urls： 一个数组，可以定义多个图片，只能使用互联网上的绝对地址 ## 2.19. 警报 这两个警报插件类似，其中的图标文件有些可以共用 ### 2.19.1. alerts 警报 这个GitBook插件将块引用转换为漂亮的警报。 [插件地址](https://plugins.gitbook.com/plugin/alerts) 在book.json中添加以下内容。然后执行`gitbook install`，或者使用NPM安装`npm install gitbook-plugin-flexible-alerts` { \"plugins\": [\"alerts\"] } 用法样式： 信息样式 [info] For info Use this for infomation messages. ``` 警告造型 > **[warning] For warning** > > Use this for warning messages. 危险造型 > **[danger] For danger** > > Use this for danger messages. 成功造型 > **[success] For success** > > Use this for success messages. 2.19. flexible-alerts 警报 这个GitBook插件将块引用转换为漂亮的警报。可以在全局和警报特定级别配置外观，因此输出确实符合您的需求（如下图）。此外，您还可以提供自己的警报类型（比如最后的comment）。 图 19 插件地址 GitHub地址 这个看上面那个链接里的内容更丰富一点 在你的gitbook的book.json文件中，添加flexible-alerts到插件列表。 在pluginsConfig中，配置插件以满足您的需求。自定义设置不是必需的。 简单使用 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-flexible-alerts，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"flexible-alerts\" ] } markdown文件中编辑 简单的markdown文件写法，效果见上图 19 的第一个图： > [!NOTE] > 这是一个简单的Note类型的使用，所有的属性都是默认值。 上面的[!NOTE]是行匹配模式，默认情况下支持类型NOTE，TIP，WARNING和DANGER。 可以通过提供有效配置来扩展可用类型（请参阅这一节最下面的示例COMMENT） 个性化使用： 在markdown中的个性化语法 > [!type|style:xx|label:xx|icon:xx|className:xx|labelVisibility:xx|iconVisibility:xx] > 内容部分 字段介绍，如果不设置的表示选择默认，除了!type都不是必需 键 允许的值 说明 !type NOTE，TIP，WARNING和DANGER 警告级别设置 style 以下值之一: callout（默认）, flat 警告样式，见图19的左右不同 label 任何文字 警告块的标题位置，即Note这个字段位置（不支持中文） icon e.g. 'fa fa-info-circle' 一个有效的Font Awesome图标，那块小符号 className CSS类的名称 指定css文件，用于指定外观 labelVisibility 以下值之一：visible（默认），hidden 标签是否可见 iconVisibility 以下值之一：visible（默认），hidden 图标是否可见 对比： > [!NOTE] > 这是一个简单的Note类型的使用，所有的属性都是默认值。 --- > [!NOTE|style:flat|lable:Mylable|iconVisibility:hidden] > \"!type\":`NOTE`、\"style\":`flat`、\"lable\":`自定义标签`、图标不可见 效果： json配置个性化 自定义一个COMMENT类型 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-flexible-alerts，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"flexible-alerts\" ], \"pluginsConfig\": { \"flexible-alerts\": { \"style\": \"callout\", \"comment\": { \"label\": \"Comment\", \"icon\": \"fa fa-comments\", \"className\": \"info\" } } } } 示例： > [!COMMENT] > An alert of type 'comment' using style 'callout' with default settings. 效果： 2.20. pageview-count 阅读量计数 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-pageview-count，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"pageview-count\"] } 2.21. auto-scroll-table 表格滚动条 为避免表格过宽，增加滚动条 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-pageview-count，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"auto-scroll-table\"] } 无滚动条刷新一下，不够宽也是没有滚动条的 2.22. 查看图片 2.22.1. popup 弹出大图 单击图片，在新页面查看大图。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-lightbox，也可以从源码GitHub地址中下载，放到node_modules文件夹里 { \"plugins\": [ \"popup\" ] } 2.22.2. lightbox 单击查看图片 点击图片可显示，大小不变 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-lightbox，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [\"lightbox\"] } 2.23. click-reveal 点击显示 默认隐藏，点击可显示。 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-click-reveal，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\": [ \"click-reveal\" ] } 快速使用： 默认显示的文字是Click to show: {% reveal %} 要被隐藏的内容 {% endreveal %} 使用自定义显示文字： {% reveal text=\"点击显示\" %} 要被隐藏的内容 {% endreveal %} 用HTML语法也可以： 点击显示 隐藏的文字 2.24. custom-favicon 修改标题栏图标 修改网页标题的图标 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-custom-favicon，也可以从源码GitHub地址中下载，放到node_modules文件夹里（GitHub地址在进入插件地址右侧的GitHub链接） { \"plugins\" : [\"custom-favicon\"], \"pluginsConfig\" : { \"favicon\": \"path/to/favicon.ico\" } } 把.ico格式的图标放进项目中。这个路径可以使用相对路径，比如我用的是./images/a.ico 注意：这个pluginsConfig和其他的不大一样。图标只能用.ico文件。 2.25. accordion 折叠模块 这个插件名叫手风琴，可以实现将内容隐藏起来，外部显示模块标题和显示箭头，点击箭头可显示里面的内容。 插件地址 GitHub地址 示例 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-custom-favicon，也可以从源码GitHub地址中下载，放到node_modules文件夹里。 { \"plugins\": [\"accordion\"] } 用法： 编辑内容，用下面的标签括起来。 %accordion%模块标题%accordion% 内容部分 %/accordion% 可嵌套，内部可以加代码块，引用，标题等都可以实现。 2.26. hide-element 隐藏元素 可以隐藏不想看到的元素，比如导航栏中Published by GitBook 插件地址 GitHub地址 在book.json中添加以下内容。然后执行gitbook install，或者使用NPM安装npm install gitbook-plugin-custom-favicon，也可以从源码GitHub地址中下载，放到node_modules文件夹里。 { \"plugins\": [ \"hide-element\" ], \"pluginsConfig\": { \"hide-element\": { \"elements\": [\".gitbook-link\"] } } } Copyright © github.qingyejiazhu.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-15 13:05:29 "},"part1/better_tools.html":{"url":"part1/better_tools.html","title":"gitbook插件使用样例","keywords":"","body":"Better tools for authors [ ] write some articles [x] drink a cup of tea This text is highlighted ! This text is highlighted with markdown! This text is highlighted in green! This text is highlighted in red! This text is highlighted with a custom color! 内容部分1； 内容部分2 ​```eval-python print [x + 1 for x in range(10)] ​ [!NOTE] 这是一个简单的Note类型的使用，所有的属性都是默认值。 ``` Copyright © github.qingyejiazhu.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-15 13:25:57 "},"part2/spring技巧.html":{"url":"part2/spring技巧.html","title":"spring技巧","keywords":"","body":"spring技巧 it Copyright © github.qingyejiazhu.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-15 15:05:06 "},"partn/git.html":{"url":"partn/git.html","title":"git","keywords":"","body":"git git 忽略不起作用 在Studio里使用Git管理代码的过程中，可以修改.gitignore文件中的标示的方法来忽略开发者想忽略掉的文件或目录，如果没有.gitignore文件，可以自己手工创建。在.gitignore文件中的每一行保存一个匹配的规则例如： 在填写忽略文件的过程中，我发现在Android Studio里面，.gitignore中已经标明忽略的文件目录下的文件，当我想git push的时候还会出现在push的目录中，原因是因为在Studio的git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，这时候我们就应该先把本地缓存删除，然后再进行git的push，这样就不会出现忽略的文件了。git清除本地缓存命令如下： git rm -r --cached . git add . git commit -m 'update .gitignore' git 创建与推送 cd gitbook-note git init git add -A git commit -m\"msg\" git remote add origin https://github.com/sunshineyanghui/gitbook-note.git git push -u origin master 编译成html 为了部署方便，现在我们修改一下文件的结构 cd gitbook-note mkdir content mv *.md content mv vue content 现在运行gitbookserve会报错，但是会自动创建 docs 文件夹，文件夹中的内容，就是编译后的输出。 正确运行执行下列命令 gitbook serve ./content ./docs 每次启动的时候，都要敲长长的命令，很不方便，所以，我们就需要把命名简短化，具体就是去写成 npm 脚本。 把项目变成一个nodejs的项目 npm init -y 生成一个package.json文件，在package.json添加一下代码 ​ \"scripts\": { ​ \"build\": \"gitbook build ./content ./docs\" }, 然后执行命令运行 ​ npm run build 这样 html 内容被编译好之后就会被保存到 docs 文件夹中。 部署到github pages 咱们来把 html 内容部署到公网上，用到的是 github 的 pages 服务。 docs 文件夹 Push 到 github 运行 git add -A; git commit 操作，把 docs 文件夹保存到版本中，然后 git push 上传。 浏览器中，到 https://github.com/sunshineyanghui/gitbook-note.git ，可以看到 docs/ 文件夹上传完毕。 配置 pages 服务 到 仓库配置页面 到 Github Pages 一项下面。Source 一项设置为 master branch docs folder 意思就是 master 分支的 docs 文件夹。 等待几分钟，到 https://qingyejiazhu/github.io/gitbook-note/，可以看到本笔记上线了。 Copyright © github.qingyejiazhu.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-15 15:18:52 "},"part3/title.html":{"url":"part3/title.html","title":"Last part without title","keywords":"","body":"Last part without title Copyright © github.qingyejiazhu.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-06-15 11:52:13 "}}